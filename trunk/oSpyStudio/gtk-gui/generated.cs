// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "MainWindow")) {
                Gtk.Window cobj = ((Gtk.Window)(obj));
                // Widget MainWindow
                cobj.Title = "oSpy Studio";
                Gtk.UIManager w1 = new Gtk.UIManager();
                Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
                Gtk.Action w3 = new Gtk.Action("File", "_File", null, null);
                w3.ShortLabel = "_File";
                bindings["File"] = w3;
                w2.Add(w3, null);
                Gtk.Action w4 = new Gtk.Action("Open", "_Open", null, "gtk-open");
                w4.ShortLabel = "_Open";
                w4.IsImportant = true;
                bindings["Open"] = w4;
                w2.Add(w4, null);
                Gtk.Action w5 = new Gtk.Action("Quit", "_Quit", null, "gtk-quit");
                w5.ShortLabel = "_Quit";
                bindings["Quit"] = w5;
                w2.Add(w5, null);
                Gtk.Action w6 = new Gtk.Action("Help", "_Help", null, null);
                w6.ShortLabel = "_Help";
                bindings["Help"] = w6;
                w2.Add(w6, null);
                Gtk.Action w7 = new Gtk.Action("About", "_About...", null, "gtk-about");
                w7.ShortLabel = "_About...";
                bindings["About"] = w7;
                w2.Add(w7, null);
                w1.InsertActionGroup(w2, 0);
                cobj.AddAccelGroup(w1.AccelGroup);
                cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                cobj.Events = ((Gdk.EventMask)(0));
                cobj.Name = "MainWindow";
                // Container child MainWindow.Gtk.Container+ContainerChild
                Gtk.VBox w8 = new Gtk.VBox();
                w8.Events = ((Gdk.EventMask)(0));
                w8.Name = "MainVBox";
                // Container child MainVBox.Gtk.Box+BoxChild
                w1.AddUiFromString("<ui><menubar name='MainMenuBar'><menu action='File'><menuitem action='Open'/><menuitem action='Quit'/></menu><menu action='Help'><menuitem action='About'/></menu></menubar></ui>");
                Gtk.MenuBar w9 = ((Gtk.MenuBar)(w1.GetWidget("/MainMenuBar")));
                w9.Events = ((Gdk.EventMask)(0));
                w9.Name = "MainMenuBar";
                bindings["MainMenuBar"] = w9;
                w8.Add(w9);
                Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w8[w9]));
                w10.Position = 0;
                w10.Expand = false;
                w10.Fill = false;
                // Container child MainVBox.Gtk.Box+BoxChild
                Gtk.HBox w11 = new Gtk.HBox();
                w11.Spacing = 5;
                w11.Events = ((Gdk.EventMask)(0));
                w11.Name = "SearchHBox";
                // Container child SearchHBox.Gtk.Box+BoxChild
                Gtk.Label w12 = new Gtk.Label();
                w12.LabelProp = "Search:";
                w12.Events = ((Gdk.EventMask)(0));
                w12.Name = "SearchLabel";
                bindings["SearchLabel"] = w12;
                w11.Add(w12);
                Gtk.Box.BoxChild w13 = ((Gtk.Box.BoxChild)(w11[w12]));
                w13.Position = 0;
                w13.Expand = false;
                w13.Fill = false;
                // Container child SearchHBox.Gtk.Box+BoxChild
                Gtk.Entry w14 = new Gtk.Entry();
                w14.IsEditable = true;
                w14.InvisibleChar = '‚óè';
                w14.CanFocus = true;
                w14.Events = ((Gdk.EventMask)(0));
                w14.Name = "SearchValue";
                bindings["SearchValue"] = w14;
                w11.Add(w14);
                Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w11[w14]));
                w15.Position = 1;
                // Container child SearchHBox.Gtk.Box+BoxChild
                Gtk.ComboBox w16 = Gtk.ComboBox.NewText();
                w16.AppendText("ASCII");
                w16.AppendText("HEX");
                w16.Active = 0;
                w16.Events = ((Gdk.EventMask)(0));
                w16.Name = "SearchType";
                bindings["SearchType"] = w16;
                w11.Add(w16);
                Gtk.Box.BoxChild w17 = ((Gtk.Box.BoxChild)(w11[w16]));
                w17.Position = 2;
                w17.Expand = false;
                w17.Fill = false;
                bindings["SearchHBox"] = w11;
                w8.Add(w11);
                Gtk.Box.BoxChild w18 = ((Gtk.Box.BoxChild)(w8[w11]));
                w18.Position = 1;
                w18.Expand = false;
                w18.Fill = false;
                // Container child MainVBox.Gtk.Box+BoxChild
                Gtk.HPaned w19 = new Gtk.HPaned();
                w19.Position = 639;
                w19.CanFocus = true;
                w19.Events = ((Gdk.EventMask)(0));
                w19.Name = "MainHSplit";
                // Container child MainHSplit.Gtk.Paned+PanedChild
                Gtk.VPaned w20 = new Gtk.VPaned();
                w20.Position = 373;
                w20.CanFocus = true;
                w20.Events = ((Gdk.EventMask)(0));
                w20.Name = "MainVSplit";
                // Container child MainVSplit.Gtk.Paned+PanedChild
                Gtk.TreeView w21 = new Gtk.TreeView();
                w21.RulesHint = true;
                w21.SearchColumn = 0;
                w21.CanFocus = true;
                w21.Events = ((Gdk.EventMask)(0));
                w21.Name = "EventList";
                bindings["EventList"] = w21;
                w20.Add(w21);
                Gtk.Paned.PanedChild w22 = ((Gtk.Paned.PanedChild)(w20[w21]));
                w22.Resize = false;
                w22.Shrink = false;
                // Container child MainVSplit.Gtk.Paned+PanedChild
                Gtk.TextView w23 = new Gtk.TextView();
                w23.CanFocus = true;
                w23.Events = ((Gdk.EventMask)(0));
                w23.Name = "DumpDisplay";
                bindings["DumpDisplay"] = w23;
                w20.Add(w23);
                Gtk.Paned.PanedChild w24 = ((Gtk.Paned.PanedChild)(w20[w23]));
                w24.Resize = false;
                bindings["MainVSplit"] = w20;
                w19.Add(w20);
                Gtk.Paned.PanedChild w25 = ((Gtk.Paned.PanedChild)(w19[w20]));
                w25.Resize = false;
                // Container child MainHSplit.Gtk.Paned+PanedChild
                Gtk.TreeView w26 = new Gtk.TreeView();
                w26.CanFocus = true;
                w26.Events = ((Gdk.EventMask)(0));
                w26.Name = "NodeList";
                bindings["NodeList"] = w26;
                w19.Add(w26);
                Gtk.Paned.PanedChild w27 = ((Gtk.Paned.PanedChild)(w19[w26]));
                w27.Resize = false;
                bindings["MainHSplit"] = w19;
                w8.Add(w19);
                Gtk.Box.BoxChild w28 = ((Gtk.Box.BoxChild)(w8[w19]));
                w28.Position = 2;
                bindings["MainVBox"] = w8;
                cobj.Add(w8);
                cobj.DefaultWidth = 655;
                cobj.DefaultHeight = 464;
                bindings["MainWindow"] = cobj;
                w9.Show();
                w12.Show();
                w14.Show();
                w16.Show();
                w11.Show();
                w21.Show();
                w23.Show();
                w20.Show();
                w26.Show();
                w19.Show();
                w8.Show();
                cobj.Show();
                cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
                w5.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnQuit")));
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
